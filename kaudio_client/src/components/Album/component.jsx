import { observer } from "mobx-react-lite";
import { useEffect, useState } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import homeStore from "../../stores/homeStore";
import authStore from "../../stores/authStore";
import instance from "../../axios/axios";
import { toJS } from "mobx";
import styles from "./Album.module.scss";

const Album = observer((props) => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [album, setAlbum] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [trackLikes, setTrackLikes] = useState({});
  const [isAlbumLiked, setIsAlbumLiked] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º props –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const setTrackName = props.setTrackName || (() => {});
  const setAuthor = props.setAuthor || (() => {});
  const setSrc = props.setSrc || (() => {});
  const setIsPlaying = props.setIsPlaying || (() => {});
  const setActiveTrackId = props.setActiveTrackId || (() => {});
  const setCurrentTrackIndex = props.setCurrentTrackIndex || (() => {});
  const setTracks = props.setTracks || (() => {});

  const isPlaying = props.isPlaying !== undefined ? props.isPlaying : false;
  const activeTrackId = props.activeTrackId;
  const tracks = props.tracks || [];

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!authStore.isAuthenticated) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /auth");
      navigate("/auth");
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–∞ –∏ –µ–≥–æ —Ç—Ä–µ–∫–∏
    const fetchAlbumData = async () => {
      setIsLoading(true);
      setError(null);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º–∞
        const albumData = await homeStore.fetchAlbumById(id);
        if (!albumData) {
          setError("–ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
          setIsLoading(false);
          return;
        }

        setAlbum(albumData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É—Ç –ª–∏ –∞–ª—å–±–æ–º
        const albumLiked = await homeStore.isAlbumLiked(parseInt(id));
        setIsAlbumLiked(albumLiked);

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∞–ª—å–±–æ–º–∞
        const albumTracks = await homeStore.fetchAlbumTracks(id);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        setTracks(albumTracks);

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –ª–∞–π–∫–Ω—É—Ç –ª–∏ –æ–Ω
        const likesMap = {};
        for (const track of albumTracks) {
          likesMap[track.id] = await homeStore.isTrackLiked(track.id);
        }
        setTrackLikes(likesMap);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–∞:", err);
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª—å–±–æ–º–∞ –∏ –µ–≥–æ —Ç—Ä–µ–∫–æ–≤");
      } finally {
        setIsLoading(false);
      }
    };

    fetchAlbumData();
  }, [id, navigate, setTracks]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞/–∞–Ω–ª–∞–π–∫–∞ —Ç—Ä–µ–∫–∞
  const handleLikeTrack = async (e, trackId) => {
    e.stopPropagation();

    try {
      if (trackLikes[trackId]) {
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫ —É–∂–µ –ª–∞–π–∫–Ω—É—Ç, —É–¥–∞–ª—è–µ–º –ª–∞–π–∫
        console.log(`–£–¥–∞–ª—è–µ–º –ª–∞–π–∫ —É —Ç—Ä–µ–∫–∞ —Å ID: ${trackId}`);
        await homeStore.unlikeTrack(trackId);
        setTrackLikes((prev) => ({ ...prev, [trackId]: false }));
      } else {
        // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –Ω–µ –ª–∞–π–∫–Ω—É—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
        console.log(`–î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ —Ç—Ä–µ–∫—É —Å ID: ${trackId}`);
        await homeStore.likeTrack(trackId);
        setTrackLikes((prev) => ({ ...prev, [trackId]: true }));
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ —Ç—Ä–µ–∫–∞:", error);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–∞/–∞–Ω–ª–∞–π–∫–∞ –∞–ª—å–±–æ–º–∞
  const handleLikeAlbum = async (e) => {
    e.stopPropagation();

    try {
      if (isAlbumLiked) {
        // –ï—Å–ª–∏ –∞–ª—å–±–æ–º —É–∂–µ –ª–∞–π–∫–Ω—É—Ç, —É–¥–∞–ª—è–µ–º –ª–∞–π–∫
        console.log(`–£–¥–∞–ª—è–µ–º –ª–∞–π–∫ —É –∞–ª—å–±–æ–º–∞ —Å ID: ${id}`);
        await homeStore.unlikeAlbum(id);
        setIsAlbumLiked(false);
      } else {
        // –ï—Å–ª–∏ –∞–ª—å–±–æ–º –Ω–µ –ª–∞–π–∫–Ω—É—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
        console.log(`–î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫ –∞–ª—å–±–æ–º—É —Å ID: ${id}`);
        await homeStore.likeAlbum(id);
        setIsAlbumLiked(true);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –∞–ª—å–±–æ–º–∞:", error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–∑ API
  const handlePlayAPITrack = async (track, index) => {
    try {
      if (activeTrackId === track.id && isPlaying) {
        // –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, —Ç–æ —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
        setIsPlaying(false);
        return;
      }

      if (activeTrackId === track.id && !isPlaying) {
        // –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫ –Ω–∞ –ø–∞—É–∑–µ, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        setIsPlaying(true);
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —Ç—Ä–µ–∫–∞
      const response = await instance.get(`tracks/${track.id}/stream/`, {
        responseType: "blob",
      });

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const audioUrl = URL.createObjectURL(response.data);

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–µ–µ—Ä–∞
      setSrc(audioUrl);
      setTrackName(track.title);
      setAuthor(
        track.artist
          ? track.artist.user?.username || track.artist.email
          : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
      );
      setCurrentTrackIndex(index);
      setActiveTrackId(track.id);
      setIsPlaying(true);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
      await instance.post(`tracks/${track.id}/play/`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:", error);
    }
  };

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∞–ª—å–±–æ–º–∞, –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ —Ç—Ä–µ–∫–∞
  const handlePlayAlbum = () => {
    if (tracks.length > 0) {
      handlePlayAPITrack(tracks[0], 0);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã
  const formatDuration = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${String(remainingSeconds).padStart(2, "0")}`;
  };

  if (isLoading) {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª—å–±–æ–º–∞...</div>;
  }

  if (error) {
    return <div className={styles.error}>{error}</div>;
  }

  if (!album) {
    return <div className={styles.error}>–ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  return (
    <div className={styles.albumContainer}>
      <div className={styles.albumHeader}>
        <div className={styles.albumCover}>
          {album.img_url ? (
            <img src={album.img_url} alt={album.title} />
          ) : (
            <div className={styles.noImage}></div>
          )}
        </div>

        <div className={styles.albumInfo}>
          <div className={styles.albumType}>–ê–ª—å–±–æ–º</div>
          <h1 className={styles.albumTitle}>{album.title}</h1>

          <div className={styles.albumMeta}>
            <Link
              to={`/artist/${album.artist?.id}`}
              className={styles.artistLink}
            >
              {album.artist?.img_cover_url && (
                <div className={styles.artistImage}>
                  <img
                    src={album.artist.img_cover_url}
                    alt={album.artist.user?.username || album.artist.email}
                  />
                </div>
              )}
              <span>
                {album.artist?.user?.username ||
                  album.artist?.email ||
                  "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"}
              </span>
            </Link>

            <span className={styles.dot}>‚Ä¢</span>
            <span className={styles.releaseYear}>
              {new Date(album.release_date).getFullYear()}
            </span>

            <span className={styles.dot}>‚Ä¢</span>
            <span className={styles.songCount}>
              {album.total_tracks}{" "}
              {album.total_tracks === 1
                ? "—Ç—Ä–µ–∫"
                : album.total_tracks > 1 && album.total_tracks < 5
                ? "—Ç—Ä–µ–∫–∞"
                : "—Ç—Ä–µ–∫–æ–≤"}
            </span>
          </div>

          <div className={styles.albumControls}>
            <button onClick={handlePlayAlbum} className={styles.playButton}>
              <span className={styles.playIcon}>‚ñ∂</span>
            </button>

            <div className={styles.albumLike} onClick={handleLikeAlbum}>
              {isAlbumLiked ? (
                <span className={styles.likedIcon}>‚ù§Ô∏è</span>
              ) : (
                <span className={styles.unlikedIcon}>ü§ç</span>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className={styles.trackList}>
        <div className={styles.trackListHeader}>
          <div className={styles.trackNumberHeader}>#</div>
          <div></div> {/* –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
          <div className={styles.trackTitleHeader}>–ù–∞–∑–≤–∞–Ω–∏–µ</div>
          <div className={styles.trackDurationHeader}>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</div>
        </div>

        {tracks.map((track, index) => (
          <div
            key={track.id}
            onClick={() => handlePlayAPITrack(track, index)}
            className={`${styles.trackItem} ${
              activeTrackId === track.id ? styles.activeTrack : ""
            }`}
          >
            <div className={styles.trackNumber}>{index + 1}</div>
            <div className={styles.trackPlayButton}>
              {activeTrackId === track.id && isPlaying ? (
                <span className={styles.pauseIcon}>‚ùö‚ùö</span>
              ) : (
                <span className={styles.playIcon}>‚ñ∂</span>
              )}
            </div>
            <div className={styles.trackInfo}>
              <div className={styles.trackTitle}>{track.title}</div>
              <div className={styles.trackArtist}>
                {track.artist?.user?.username ||
                  track.artist?.email ||
                  "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"}
              </div>
            </div>
            <div className={styles.trackDuration}>
              {formatDuration(track.duration)}
              <div
                className={styles.trackLike}
                onClick={(e) => handleLikeTrack(e, track.id)}
              >
                {trackLikes[track.id] ? (
                  <span className={styles.likedIcon}>‚ù§Ô∏è</span>
                ) : (
                  <span className={styles.unlikedIcon}>ü§ç</span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
});

export default Album;
