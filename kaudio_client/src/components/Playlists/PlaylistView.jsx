import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import instance from "../../axios/axios";
import MiniPlayer from "../MiniPlayer/component";
import styles from "./PlaylistView.module.scss";
import playerStore from "../../stores/playerStore";
import { observer } from "mobx-react-lite";

const PlaylistView = observer(() => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [playlist, setPlaylist] = useState(null);
  const [tracks, setTracks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [showAddTrackModal, setShowAddTrackModal] = useState(false);

  useEffect(() => {
    fetchPlaylistData();
  }, [id]);

  const fetchPlaylistData = async () => {
    try {
      setLoading(true);
      const response = await instance.get(`/playlists/${id}/`);
      setPlaylist(response.data);
      setTracks(response.data.tracks || []);
      setError(null);
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞");
      console.error("–û—à–∏–±–∫–∞:", err);
    } finally {
      setLoading(false);
    }
  };

  const handlePlayTrack = async (track, index) => {
    try {
      if (playerStore.trackId === track.id) {
        // –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫ —É–∂–µ –∏–≥—Ä–∞–µ—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑—É
        if (playerStore.isPlaying) {
          playerStore.pause();
        } else {
          playerStore.play();
        }
        return;
      }

      console.log("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞:", track.title);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª —Ç—Ä–µ–∫–∞
      const response = await instance.get(`tracks/${track.id}/stream/`, {
        responseType: "blob",
      });

      console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status);

      // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      const audioUrl = URL.createObjectURL(response.data);
      console.log("–°–æ–∑–¥–∞–Ω URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:", audioUrl);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–∫ –≤ –ø–ª–µ–µ—Ä
      playerStore.loadTrack(
        {
          ...track,
          file_url: audioUrl,
        },
        index,
        tracks
      );

      console.log("–¢—Ä–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–ª–µ–µ—Ä:", {
        id: playerStore.trackId,
        name: playerStore.trackName,
        url: playerStore.trackUrl,
      });

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
      await instance.post(`tracks/${track.id}/play/`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:", err);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞");
    }
  };

  const handleSearchTracks = async () => {
    if (!searchQuery.trim()) {
      setSearchResults([]);
      return;
    }

    try {
      const response = await instance.get(`tracks/`, {
        params: {
          search: searchQuery,
        },
      });

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
      const existingTrackIds = tracks.map((track) => track.id);
      const filteredResults = response.data.filter(
        (track) => !existingTrackIds.includes(track.id)
      );

      setSearchResults(filteredResults);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤:", err);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤");
    }
  };

  const handleAddTrack = async (trackId) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
      const existingTracks = await instance.get(`playlist-tracks/`, {
        params: {
          playlist_id: id,
          track_id: trackId,
        },
      });

      if (existingTracks.data && existingTracks.data.length > 0) {
        setError("–≠—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ");
        return;
      }

      // –ï—Å–ª–∏ —Ç—Ä–µ–∫–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      await instance.post(`playlist-tracks/`, {
        playlist_id: id,
        track_id: trackId,
        position: tracks.length + 1,
      });

      fetchPlaylistData(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤
      setShowAddTrackModal(false);
      setSearchQuery("");
      setSearchResults([]);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:", err);
      if (err.response?.data?.detail) {
        setError(err.response.data.detail);
      } else if (err.response?.status === 500) {
        setError(
          "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–∫ —É–∂–µ –µ—Å—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ."
        );
      } else {
        setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞");
      }
    }
  };

  const handleRemoveTrack = async (trackId) => {
    if (
      window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞?")
    ) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º ID –∑–∞–ø–∏—Å–∏ PlaylistTrack
        const playlistTrack = await instance.get(`playlist-tracks/`, {
          params: {
            playlist_id: id,
            track_id: trackId,
          },
        });

        if (playlistTrack.data && playlistTrack.data.length > 0) {
          await instance.delete(`playlist-tracks/${playlistTrack.data[0].id}/`);
          fetchPlaylistData();
        } else {
          throw new Error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ");
        }
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:", err);
        if (err.response?.data?.detail) {
          setError(err.response.data.detail);
        } else {
          setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞");
        }
      }
    }
  };

  if (loading) {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return <div className={styles.error}>{error}</div>;
  }

  return (
    <div className={styles.playlistView}>
      <div className={styles.playlistHeader}>
        <div className={styles.playlistInfo}>
          <div className={styles.coverImage}>
            {playlist?.cover_image ? (
              <img src={playlist.cover_image} alt={playlist.title} />
            ) : (
              <div className={styles.defaultCover}>üéµ</div>
            )}
          </div>
          <div className={styles.details}>
            <h1>{playlist?.title}</h1>
            <p className={styles.description}>
              {playlist?.description || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"}
            </p>
            <p className={styles.trackCount}>–¢—Ä–µ–∫–æ–≤: {tracks.length}</p>
          </div>
        </div>
        <div className={styles.actions}>
          <button
            onClick={() => navigate(`/playlists/${id}/edit`)}
            className={styles.editButton}
          >
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </button>
          <button
            onClick={() => setShowAddTrackModal(true)}
            className={styles.addButton}
          >
            –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏
          </button>
        </div>
      </div>

      <div className={styles.tracksList}>
        {tracks.map((track, index) => (
          <div key={track.id} className={styles.trackItem}>
            <div
              className={styles.trackInfo}
              onClick={() => handlePlayTrack(track, index)}
            >
              <span className={styles.trackNumber}>{index + 1}</span>
              <div className={styles.trackDetails}>
                <span className={styles.trackTitle}>{track.title}</span>
                <span className={styles.trackArtist}>
                  {track.artist?.email || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"}
                </span>
              </div>
              <span className={styles.playStatus}>
                {playerStore.trackId === track.id
                  ? playerStore.isPlaying
                    ? "‚è∏"
                    : "‚ñ∂"
                  : "‚ñ∂"}
              </span>
            </div>
            <button
              onClick={() => handleRemoveTrack(track.id)}
              className={styles.removeButton}
            >
              –£–¥–∞–ª–∏—Ç—å
            </button>
          </div>
        ))}
      </div>

      {showAddTrackModal && (
        <div className={styles.modal}>
          <div className={styles.modalContent}>
            <h2>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏</h2>
            <div className={styles.searchBox}>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤..."
              />
              <button onClick={handleSearchTracks}>–ü–æ–∏—Å–∫</button>
            </div>
            <div className={styles.searchResults}>
              {searchResults.map((track) => (
                <div key={track.id} className={styles.searchResultItem}>
                  <div className={styles.trackInfo}>
                    <span className={styles.trackTitle}>{track.title}</span>
                    <span className={styles.trackArtist}>
                      {track.artist?.email || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"}
                    </span>
                  </div>
                  <button onClick={() => handleAddTrack(track.id)}>
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
              ))}
            </div>
            <button
              onClick={() => setShowAddTrackModal(false)}
              className={styles.closeButton}
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}

      <div className={styles.playerContainer}>
        <MiniPlayer
          trackName={playerStore.trackName}
          author={playerStore.author}
          isPlaying={playerStore.isPlaying}
          name={playerStore.trackUrl}
          onPlayPause={() =>
            playerStore.isPlaying ? playerStore.pause() : playerStore.play()
          }
          onPrev={() => playerStore.prevTrack()}
          onNext={() => playerStore.nextTrack()}
        />
      </div>
    </div>
  );
});

export default PlaylistView;
